version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: insta-connect-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-insta_connect}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - insta-connect-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insta-connect-app
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-insta_connect}
      APP_ID: ${APP_ID}
      APP_SECRET: ${APP_SECRET}
      OAUTH_REDIRECT_URI: ${OAUTH_REDIRECT_URI:-http://localhost:3000/oauth/callback}
      VERIFY_TOKEN: ${VERIFY_TOKEN}
      OAUTH_STATE_SECRET: ${OAUTH_STATE_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      DOPPLER_TOKEN: ${DOPPLER_TOKEN}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - insta-connect-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  insta-connect-network:
    driver: bridge

